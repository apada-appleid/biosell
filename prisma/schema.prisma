// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// مدل کاربران (ادمین‌ها)
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin")
  phone     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// مدل پلن‌های اشتراک
model Plan {
  id          String         @id @default(uuid())
  name        String
  price       Int
  features    Json
  maxProducts Int            @default(100) @map("max_products")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  Subscription Subscription[]

  @@map("plans")
}

// مدل فروشندگان
model Seller {
  id           String         @id @default(uuid())
  username     String         @unique
  email        String         @unique
  password     String
  shopName     String         @map("shop_name")
  bio          String?
  profileImage String?        @map("profile_image")
  isActive     Boolean        @default(true) @map("is_active")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  products     Product[]
  subscriptions Subscription[]
  orders       Order[]        // ارتباط با سفارش‌ها

  @@map("sellers")
}

// مدل اشتراک‌ها
model Subscription {
  id        String   @id @default(uuid())
  sellerId  String   @map("seller_id")
  planId    String   @map("plan_id")
  startDate DateTime @default(now()) @map("start_date")
  endDate   DateTime @map("end_date")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  seller    Seller   @relation(fields: [sellerId], references: [id])
  plan      Plan     @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

// مدل تصاویر محصول
model ProductImage {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  imageUrl  String   @map("image_url")
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// مدل محصولات
model Product {
  id          String         @id @default(uuid())
  sellerId    String         @map("seller_id")
  title       String
  description String?
  price       Int
  inventory   Int            @default(0)
  isActive    Boolean        @default(true) @map("is_active")
  likesCount  Int            @default(0) @map("likes_count")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  seller      Seller         @relation(fields: [sellerId], references: [id])
  images      ProductImage[]
  orderItems  OrderItem[]    // ارتباط با آیتم‌های سفارش

  @@map("products")
}

// مدل مشتریان
model Customer {
  id          String            @id @default(uuid())
  fullName    String?           @map("full_name")
  email       String?
  mobile      String?
  address     String?           // Keep for backward compatibility
  city        String?           // Keep for backward compatibility
  postalCode  String?           @map("postal_code") // Keep for backward compatibility
  country     String?
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  orders      Order[]
  addresses   CustomerAddress[] // New relation to customer addresses

  @@unique([email], name: "unique_customer_email", map: "unique_customer_email")
  @@unique([mobile], name: "unique_customer_mobile", map: "unique_customer_mobile")
  @@map("customers")
}

// مدل آدرس‌های مشتریان - New model
model CustomerAddress {
  id         String   @id @default(uuid())
  customerId String   @map("customer_id")
  fullName   String   @map("full_name")
  phone      String
  address    String
  city       String
  province   String
  postalCode String   @map("postal_code")
  isDefault  Boolean  @default(false) @map("is_default")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_addresses")
}

// مدل کد تایید یکبار مصرف
model otp {
  id        String   @id @default(uuid())
  mobile    String   @unique
  code      String
  expiresAt DateTime @map("expires_at")
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("otps")
}

// مدل سفارش‌ها
model Order {
  id              String     @id @default(uuid())
  orderNumber     String     @unique @map("order_number")
  customerId      String     @map("customer_id")
  sellerId        String     @map("seller_id")
  total           Int
  status          String     @default("pending") // pending, processing, completed, cancelled
  paymentMethod   String     @map("payment_method") // cash_on_delivery, credit_card
  paymentStatus   String     @default("pending") @map("payment_status") // pending, paid, failed
  shippingAddress String?    @map("shipping_address")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  customer        Customer   @relation(fields: [customerId], references: [id])
  seller          Seller     @relation(fields: [sellerId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

// مدل آیتم‌های سفارش
model OrderItem {
  id          String   @id @default(uuid())
  orderId     String   @map("order_id")
  productId   String   @map("product_id")
  title       String   // عنوان محصول در زمان سفارش
  price       Int      // قیمت محصول در زمان سفارش
  quantity    Int
  totalPrice  Int      @map("total_price")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}
