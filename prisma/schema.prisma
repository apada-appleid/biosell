// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

// مدل کاربران (ادمین‌ها)
model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  role      String   @default("admin") @db.VarChar(50)
  mobile    String?  @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// مدل پلن‌های اشتراک
model Plan {
  id           String         @id @default(uuid())
  name         String         @db.VarChar(255)
  price        Int
  features     Json
  maxProducts  Int            @default(100) @map("max_products")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  Subscription Subscription[]

  @@map("plans")
}

// مدل پرداخت‌های پلن (جدید)
model PlanPayment {
  id             String       @id @default(uuid())
  subscriptionId String       @map("subscription_id")
  sellerId       String       @map("seller_id")
  amount         Int
  status         String       @default("pending") @db.VarChar(50) // pending, approved, rejected
  receiptInfo    String?      @map("receipt_info") @db.Text // JSON string with receipt metadata
  reviewedAt     DateTime?    @map("reviewed_at")
  reviewedBy     String?      @map("reviewed_by")
  notes          String?      @db.Text
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  seller         Seller       @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("plan_payments")
}

// مدل فروشندگان
model Seller {
  id            String         @id @default(uuid())
  username      String         @unique @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  bio           String?        @db.Text
  profileImage  String?        @map("profile_image") @db.VarChar(500)
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  subscriptions Subscription[]
  planPayments  PlanPayment[]
  shops         SellerShop[]
  orders        Order[] // ارتباط با سفارش‌ها

  @@map("sellers")
}

// مدل فروشگاه‌های فروشنده
model SellerShop {
  id           String               @id @default(uuid())
  sellerId     String               @map("seller_id")
  shopName     String               @map("shop_name") @db.VarChar(255)
  instagramId  String?              @map("instagram_id") @db.VarChar(255)
  description  String?              @db.Text
  isActive     Boolean              @default(true) @map("is_active")
  createdAt    DateTime             @default(now()) @map("created_at")
  updatedAt    DateTime             @updatedAt @map("updated_at")
  deletedAt    DateTime?            @map("deleted_at")
  seller       Seller               @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  products     Product[]
  productShops ProductShopMapping[]
  orders       Order[]

  @@map("seller_shops")
}

// مدل اشتراک‌ها
model Subscription {
  id          String        @id @default(uuid())
  sellerId    String        @map("seller_id")
  planId      String        @map("plan_id")
  startDate   DateTime      @default(now()) @map("start_date")
  endDate     DateTime      @map("end_date")
  isActive    Boolean       @default(true) @map("is_active")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  seller      Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  plan        Plan          @relation(fields: [planId], references: [id], onDelete: Cascade)
  payments    PlanPayment[]

  @@map("subscriptions")
}

// مدل تصاویر محصول
model ProductImage {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  imageUrl  String   @map("image_url") @db.VarChar(500)
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// مدل محصولات
model Product {
  id          String               @id @default(uuid())
  shopId      String               @map("shop_id")
  title       String               @db.VarChar(255)
  description String?              @db.Text
  price       Int
  inventory   Int                  @default(0)
  isActive    Boolean              @default(true) @map("is_active")
  requiresAddress Boolean          @default(true) @map("requires_address")
  likesCount  Int                  @default(0) @map("likes_count")
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  deletedAt   DateTime?            @map("deleted_at")
  shop        SellerShop           @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shops       ProductShopMapping[]
  images      ProductImage[]
  orderItems  OrderItem[] // ارتباط با آیتم‌های سفارش

  @@map("products")
}

// مدل رابط محصول با فروشگاه‌ها - جدول رابطه چند به چند
model ProductShopMapping {
  id        String     @id @default(uuid())
  productId String     @map("product_id")
  shopId    String     @map("shop_id")
  createdAt DateTime   @default(now()) @map("created_at")
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  shop      SellerShop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([productId, shopId], name: "product_shop_unique")
  @@map("product_shop_mappings")
}

// مدل مشتریان
model Customer {
  id         String            @id @default(uuid())
  fullName   String?           @map("full_name") @db.VarChar(255)
  email      String?           @db.VarChar(255)
  mobile     String?           @db.VarChar(20)
  address    String?           @db.Text // Keep for backward compatibility
  city       String?           @db.VarChar(100) // Keep for backward compatibility
  postalCode String?           @map("postal_code") @db.VarChar(20) // Keep for backward compatibility
  country    String?           @db.VarChar(100)
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")
  orders     Order[]
  addresses  CustomerAddress[] // New relation to customer addresses

  @@unique([email], name: "unique_customer_email", map: "unique_customer_email")
  @@unique([mobile], name: "unique_customer_mobile", map: "unique_customer_mobile")
  @@map("customers")
}

// مدل آدرس‌های مشتریان - New model
model CustomerAddress {
  id         String    @id @default(uuid())
  customerId String    @map("customer_id")
  fullName   String    @map("full_name") @db.VarChar(255)
  mobile     String    @db.VarChar(20)
  address    String    @db.Text
  city       String    @db.VarChar(100)
  province   String    @db.VarChar(100)
  postalCode String    @map("postal_code") @db.VarChar(20)
  isDefault  Boolean   @default(false) @map("is_default")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_addresses")
}

// مدل کد تایید یکبار مصرف
model otp {
  id        String   @id @default(uuid())
  mobile    String   @unique @db.VarChar(20)
  code      String   @db.VarChar(10)
  expiresAt DateTime @map("expires_at")
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("otps")
}

// مدل سفارش‌ها
model Order {
  id               String      @id @default(uuid())
  orderNumber      String      @unique @map("order_number") @db.VarChar(50)
  customerId       String      @map("customer_id")
  sellerId         String      @map("seller_id")
  shopId           String      @map("shop_id")
  total            Int
  status           String      @default("pending") @db.VarChar(50) // pending, processing, completed, cancelled
  paymentMethod    String      @map("payment_method") @db.VarChar(50) // cash_on_delivery, credit_card
  paymentStatus    String      @default("pending") @map("payment_status") @db.VarChar(50) // pending, paid, failed
  shippingAddress  String?     @map("shipping_address") @db.Text
  addressId        String?     @map("address_id")
  trackingNumber   String?     @map("tracking_number") @db.VarChar(100)
  shippingProvider String?     @map("shipping_provider") @db.VarChar(100)
  receiptInfo      String?     @map("receipt_info") @db.Text // Store receipt information as JSON string
  customerNotes    String?     @map("customer_notes") @db.Text
  sellerNotes      String?     @map("seller_notes") @db.Text
  processedAt      DateTime?   @map("processed_at")
  shippedAt        DateTime?   @map("shipped_at")
  deliveredAt      DateTime?   @map("delivered_at")
  cancelledAt      DateTime?   @map("cancelled_at")
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  customer         Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  seller           Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  shop             SellerShop  @relation(fields: [shopId], references: [id], onDelete: Cascade)
  items            OrderItem[]

  @@map("orders")
}

// مدل آیتم‌های سفارش
model OrderItem {
  id         String   @id @default(uuid())
  orderId    String   @map("order_id")
  productId  String   @map("product_id")
  title      String   @db.VarChar(255) // عنوان محصول در زمان سفارش
  price      Int // قیمت محصول در زمان سفارش
  quantity   Int
  totalPrice Int      @map("total_price")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@map("order_items")
}
